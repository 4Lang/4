Readability notes:
[\t]: [INDENT]
[ ] : [WHITESPACE]

source
	: stat_or_decl
	: stat_or_decl source

stat_or_decl
	: stat
	: definition

decl:
	: 

stat
	: label_stat
	: exp_stat
	: compound_stat
	: selection_stat
	: iteration_stat
	: jump_stat

label_stat
	: [\t][IDENTIFIER][COLON][\t]stat
	: [\t][CASE]exp[COLON][\t]stat
	: [\t][DEFAULT][COLON]stat

exp_stat
	: exp[\t]

compound_stat
	: [\t]declaration_list[\t]stat_list
	: [\t]stat_list
	: [\t]declaration_list
	: [\t][\t]

stat_list
	: stat
	: stat_liststat

selection_stat
	: [IF]exp[\t]stat
	: [IF]exp[\t]stat[ELSE]stat
	: [SWITCH]exp[\t]stat

iteration_stat
	:[LOOP]exp[\t]stat
	:[LOOP]exp[ ]exp[\t]stat
	:[LOOP]exp[ ]exp[ ]exp[\t]stat
	:[LOOP]exp[COLON]exp[\t]stat
	:stat[\t][LOOP]exp
	:stat[\t][LOOP]exp[ ]exp
	:stat[\t][LOOP]exp[COLON]exp

jump_stat
	:[GOTO][IDENTIFIER]
	:[CONTINUE]
	:[BREAK]
	:[RETURN]exp
	:[RETURN]

exp
	: conditional_exppression
	: unary_exp assignment_operator exp

assignment_operator
	: EQUALS
	: MUL_ASSIGN
	: DIV_ASSIGN
	: MOD_ASSIGN
	: ADD_ASSIGN
	: MIN_ASSIGN
	: LEFT_ASSIGN
	: RIGHT_ASSIGN
	: AND_ASSIGN
	: XOR_ASSIGN
	: OR_ASSIGN

conditional_exppression
	: logical_or_exp

constant_exp
	: conditional_exppression
	
logical_or_exp
	: logical_and_exp
	: logical_or_exp[OR_OP]logical_and_exp

logical_and_exp
	: logical_and_exp
	: logical_or_exp[AND_OP]inclusive_or_exp
	
inclusive_or_exp
	: exclusive_or_exp
	: inclusive_or_exp 
	
exclusive_or_exp
	: and_exp
	: exclusive_or_exp[XOR]and_exp

and_exp
	: equality_exp
	: and_exp[AND]equality_exp

equality_exp
	: relational_exp
	: equality_exp[EQ_OP]relational_exp
	: equality_exp[NE_OP]relational_exp

relational_exp
	: shift_expression
	: relational_exp[LEFT]shift_expression
	: relational_exp[RIGHT]shift_expression
	: relational_exp[LE_OP]shift_expression
	: relational_exp[GE_OP]shift_expression

shift_expression
	: additive_exp
	: shift_expression[LEFT_OP]additive_exp
	: shift_expression[RIGHT_OP]additive_exp
	
additive_exp
	: mult_exp
	: additive_exp[ADD]mult_exp
	: additive_exp[MIN]mult_exp

mult_exp
	: cast_exp
	: mult_exp[MUL]cast_exp
	: mult_exp[DIV]cast_exp
	: mult_exp[MOD]cast_exp

cast_exp
	: unary_exp
	: cast_exp[DOT]type_name

unary_exp
	: postfix_exp
	: [INC_OP]unary_exp
	: [DEC_OP]unary_exp
	: unary_operator cast_exp
	: ??? 'sizeof' unary_exp
	: ??? 'sizeof' '(' type_name ')'

unary_operator
	: EQUALS
	: MUL
	: ADD
	: MIN
	: TILDE
	: NOT

postfix_exp
	: primary_exp
	: postfix_exp[LBRACKET]exp[RBRACKET]
	: postfix_exp[LPARENT]argument_exp_list[RPARENT]
	: postfix_exp[LPARENT][RPARENT]
	: postfix_exp[DOT]id
	: postfix_exp[INC_OP]
	: postfix_exp[DEC_OP]

primary_exp
	: [IDENTIFIER]
	: const
	: string
	: [LBRACKET]exp[RBRACKET]

argument_exp_list
	: assignment_exp
	: argument_exp_list[COMMA]assignment_exp

const
	: int_const
	: char_const
	: float_const
	: enumeration_const

