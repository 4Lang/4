Readability notes:
[\t]: [INDENT]
[ ] : [WHITESPACE]

source
	: stat_or_def
	: stat_or_def source

stat_or_decl
	: stat
	: def

def
	: function_def
	: decl

function_def
	: decl_specs declarator decl_list compound_stat
	:            declarator decl_list compound_stat
	: decl_specs declarator           compound_stat
	:            declarator           compound_stat
	
decl
	: decl_specs init_delcarator_list[\t]
	: decl_specs                     [\t]

decl_specs
	: storage_class_spec decl_specs
	: storage_class_spec
	: type_spec decl_specs
	: type_spec
	: type_qualifier decl_specs
	: type_qualifier

stat
	: label_stat
	: exp_stat
	: compound_stat
	: selection_stat
	: iteration_stat
	: jump_stat

label_stat
	: [\t][IDENTIFIER][COLON][\t]stat
	: [\t][CASE]exp[COLON][\t]stat
	: [\t][DEFAULT][COLON]stat

exp_stat
	: exp[\t]

compound_stat
	: [\t]decl_list[\t]stat_list
	: [\t]stat_list
	: [\t]decl_list
	: [\t][\t]

stat_list
	: stat
	: stat_liststat

selection_stat
	: [IF]exp[\t]stat
	: [IF]exp[\t]stat[ELSE]stat
	: [SWITCH]exp[\t]stat

iteration_stat
	:[LOOP]exp[\t]stat
	:[LOOP]exp[ ]exp[\t]stat
	:[LOOP]exp[ ]exp[ ]exp[\t]stat
	:[LOOP]exp[COLON]exp[\t]stat
	:stat[\t][LOOP]exp
	:stat[\t][LOOP]exp[ ]exp
	:stat[\t][LOOP]exp[COLON]exp

jump_stat
	:[GOTO][IDENTIFIER]
	:[CONTINUE]
	:[BREAK]
	:[RETURN]exp
	:[RETURN]

exp
        : logical_or_exp
        : unary_exp [EQUALS]       exp
        : unary_exp [MUL_ASSIGN]   exp
        : unary_exp [DIV_ASSIGN]   exp
        : unary_exp [MOD_ASSIGN]   exp
        : unary_exp [ADD_ASSIGN]   exp
        : unary_exp [MIN_ASSIGN]   exp
        : unary_exp [LEFT_ASSIGN]  exp
        : unary_exp [RIGHT_ASSIGN] exp
        : unary_exp [AND_ASSIGN]   exp
        : unary_exp [XOR_ASSIGN]   exp
        : unary_exp [OR_ASSIGN]    exp

constant_exp
	: conditional_exppression
	
logical_or_exp
	: logical_and_exp
	: logical_or_exp[OR_OP]logical_and_exp

logical_and_exp
	: logical_and_exp
	: logical_or_exp[AND_OP]inclusive_or_exp
	
inclusive_or_exp
	: exclusive_or_exp
	: inclusive_or_exp 
	
exclusive_or_exp
	: and_exp
	: exclusive_or_exp[XOR]and_exp

and_exp
	: equality_exp
	: and_exp[AND]equality_exp

equality_exp
	: relational_exp
	: equality_exp[EQ_OP]relational_exp
	: equality_exp[NE_OP]relational_exp

relational_exp
	: shift_exp
	: relational_exp[LEFT]shift_exp
	: relational_exp[RIGHT]shift_exp
	: relational_exp[LE_OP]shift_exp
	: relational_exp[GE_OP]shift_exp

shift_exp
	: additive_exp
	: shift_exp[LEFT_OP]additive_exp
	: shift_exp[RIGHT_OP]additive_exp
	
additive_exp
	: mult_exp
	: additive_exp[ADD]mult_exp
	: additive_exp[MIN]mult_exp

mult_exp
	: cast_exp
	: mult_exp[MUL]cast_exp
	: mult_exp[DIV]cast_exp
	: mult_exp[MOD]cast_exp

cast_exp
	: unary_exp
	: cast_exp[DOT]type_name

unary_exp
	: postfix_exp
	: [INC_OP]unary_exp
	: [DEC_OP]unary_exp
	: unary_operator cast_exp
	: ??? 'sizeof' unary_exp
	: ??? 'sizeof' '(' type_name ')'

unary_operator
	: EQUALS
	: MUL
	: ADD
	: MIN
	: TILDE
	: NOT

postfix_exp
	: primary_exp
	: postfix_exp[LBRACKET]exp[RBRACKET]
	: postfix_exp[LPARENT]argument_exp_list[RPARENT]
	: postfix_exp[LPARENT][RPARENT]
	: postfix_exp[DOT]id
	: postfix_exp[INC_OP]
	: postfix_exp[DEC_OP]

primary_exp
	: [IDENTIFIER]
	: const
	: string
	: [LBRACKET]exp[RBRACKET]
	: [IDENTIFIER][WHITESPACE]argument_list

argument_exp_list
	: assignment_exp
	: argument_exp_list[COMMA]assignment_exp

const
	: int_const
	: char_const
	: float_const
	: enumeration_const

